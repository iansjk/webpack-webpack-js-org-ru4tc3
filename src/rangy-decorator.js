// const jQuery = require('jquery');
// const $ = jQuery;
const rangy = require('./vendor/rangy-core.js');

// Generated by CoffeeScript 1.12.7
var AnnotatedTextRangeList,
  App,
  Controller,
  DecoratableBlock,
  DecoratableBlockContainer,
  HighlightedTextRangeList,
  RangyDecorator,
  RangyRangeFactory,
  RemoteStorage,
  RemoteStorageAPI,
  TextRange,
  TextRangeFactory,
  UI,
  UIAnnotationManager,
  UIAnnotationWidget,
  UIAnnotationWidgetConflictResolver,
  UIAnnotationWidgetManager,
  UIHighlightKeys,
  UIHighlightMenu,
  UIHighlighter,
  Util,
  slice = [].slice;

Util = {
  cleanNode: (function (_this) {
    return function (node) {
      var BLOCKLEVEL,
        child,
        childsToRemove,
        cleanNodeValue,
        isBlockLevel,
        j,
        k,
        len,
        len1,
        ref;
      BLOCKLEVEL = {
        ADDRESS: 'ADDRESS',
        ARTICLE: 'ARTICLE',
        ASIDE: 'ASIDE',
        AUDIO: 'AUDIO',
        BLOCKQUOTE: 'BLOCKQUOTE',
        CANVAS: 'CANVAS',
        DD: 'DD',
        DIV: 'DIV',
        DL: 'DL',
        FIELDSET: 'FIELDSET',
        FIGCAPTION: 'FIGCAPTION',
        FIGURE: 'FIGURE',
        FOOTER: 'FOOTER',
        FORM: 'FORM',
        H1: 'H1',
        H2: 'H2',
        H3: 'H3',
        H4: 'H4',
        H5: 'H5',
        H6: 'H6',
        HEADER: 'HEADER',
        HGROUP: 'HGROUP',
        HR: 'HR',
        NOSCRIPT: 'NOSCRIPT',
        OL: 'OL',
        OUTPUT: 'OUTPUT',
        P: 'P',
        PRE: 'PRE',
        SECTION: 'SECTION',
        TABLE: 'TABLE',
        TFOOT: 'TFOOT',
        UL: 'UL',
        VIDEO: 'VIDEO',
      };
      isBlockLevel = function (node) {
        return (
          node !== null && node.nodeType === 1 && BLOCKLEVEL[node.nodeName]
        );
      };
      cleanNodeValue = function (node) {
        return (node.nodeValue = node.nodeValue
          .replace(/\r\n/g, '\n')
          .replace(/\s+/g, ' '));
      };
      childsToRemove = [];
      ref = node.childNodes;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        if (child.nodeType === 3) {
          if (
            node.nodeName === 'PRE' ||
            (node.dataset && node.dataset.preserveWhiteSpace)
          ) {
            child.nodeValue = child.nodeValue.replace(/\r\n|\r|\n/g, '\n');
          } else {
            if (/\S/.test(child.nodeValue)) {
              cleanNodeValue(child);
            } else {
              if (
                isBlockLevel(node) &&
                (child.previousSibling === null || child.nextSibling === null)
              ) {
                childsToRemove.push(child);
              } else if (
                isBlockLevel(child.previousSibling) ||
                isBlockLevel(child.nextSibling)
              ) {
                childsToRemove.push(child);
              } else {
                cleanNodeValue(child);
              }
            }
          }
        }
        if (child.nodeType === 1) {
          Util.cleanNode(child);
        }
      }
      for (k = 0, len1 = childsToRemove.length; k < len1; k++) {
        child = childsToRemove[k];
        node.removeChild(child);
      }
      return node;
    };
  })(this),
  nodeText: function (node) {
    var j, len, ref, text, textNode;
    text = '';
    ref = Util.childTextNodes(node);
    for (j = 0, len = ref.length; j < len; j++) {
      textNode = ref[j];
      text += textNode.data;
    }
    return text;
  },
  rangeText: function (range) {
    return Util.nodeText(range.cloneContents());
  },
  childTextNodes: function (node) {
    var childTextNodes_, nodes;
    nodes = [];
    childTextNodes_ = function (node, nodes) {
      var child;
      if (node) {
        child = node.firstChild;
        while (child) {
          if (!(child.nodeName === 'math' || child.className === 'mjx-chtml')) {
            if (child.nodeType === 3) {
              nodes.push(child);
            }
            if (childTextNodes_(child, nodes)) {
              return true;
            }
          }
          child = child.nextSibling;
        }
      }
      return false;
    };
    childTextNodes_(node, nodes);
    return nodes;
  },
  textOffsets: function (textNodes, range) {
    var end, j, len, node, result, s, start;
    start = null;
    end = null;
    s = 0;
    for (j = 0, len = textNodes.length; j < len; j++) {
      node = textNodes[j];
      if (start === null) {
        if (node === range.startContainer) {
          start = s + range.startOffset;
        } else {
          result = range.compareNode(node);
          if (
            result === rangy.DomRange.NODE_INSIDE ||
            result === rangy.DomRange.NODE_AFTER
          ) {
            start = s;
          }
        }
      }
      if (end === null) {
        if (node === range.endContainer) {
          end = s + (range.endOffset - 1);
        } else if (range.compareNode(node) === rangy.DomRange.NODE_AFTER) {
          end = s - 1;
        }
      }
      if (start !== null && end !== null) {
        break;
      }
      s += node.data.length;
    }
    if (end === null) {
      end = s - 1;
    }
    return [start, end];
  },
};

DecoratableBlock = (function () {
  function DecoratableBlock(node1) {
    this.node = node1;
  }

  DecoratableBlock.prototype.getRange = function () {
    var range;
    range = rangy.createRange();
    range.setStart(this.node, 0);
    range.setEnd(this.node, this.node.childNodes.length);
    return range;
  };

  return DecoratableBlock;
})();

DecoratableBlockContainer = (function () {
  function DecoratableBlockContainer(node, blockSelector) {
    this.blockSelector =
      blockSelector != null ? blockSelector : 'h1,h2,h3,h4,h5,h6,p,ol,ul,pre';
    this.nodeId = node.id;
    this._init();
  }

  DecoratableBlockContainer.prototype._init = function () {
    var j, len, node, nodes, results;
    this.node = document.getElementById(this.nodeId);
    this.fullRange = rangy.createRange();
    this.fullRange.selectNode(this.node);
    nodes = jQuery(this.node).children(this.blockSelector);
    this.blocks = [];
    results = [];
    for (j = 0, len = nodes.length; j < len; j++) {
      node = nodes[j];
      results.push(this.blocks.push(new DecoratableBlock(node)));
    }
    return results;
  };

  DecoratableBlockContainer.prototype.reload = function () {
    return this._init();
  };

  DecoratableBlockContainer.prototype.decoratableText = function () {
    var block, j, len, ref, text;
    text = '';
    ref = this.blocks;
    for (j = 0, len = ref.length; j < len; j++) {
      block = ref[j];
      text += Util.nodeText(block.node);
    }
    return text;
  };

  DecoratableBlockContainer.prototype.textNodes = function () {
    var block, j, k, len, len1, node, nodes, ref, ref1;
    nodes = [];
    ref = this.blocks;
    for (j = 0, len = ref.length; j < len; j++) {
      block = ref[j];
      ref1 = Util.childTextNodes(block.node);
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        node = ref1[k];
        nodes.push(node);
      }
    }
    return nodes;
  };

  DecoratableBlockContainer.prototype.fitRange = function (range) {
    if (range.compareBoundaryPoints(range.START_TO_START, this.fullRange) < 0) {
      range.setStart(this.node, 0);
    }
    if (range.compareBoundaryPoints(range.END_TO_END, this.fullRange) > 0) {
      range.setEnd(this.node, this.node.childNodes.length);
    }
    return null;
  };

  DecoratableBlockContainer.prototype.decoratableRangesIn = function (range) {
    var block, blockRange, j, len, ranges, ref;
    ranges = [];
    if (range.collapsed) {
      return ranges;
    }
    ref = this.blocks;
    for (j = 0, len = ref.length; j < len; j++) {
      block = ref[j];
      blockRange = block.getRange();
      if (blockRange.collapsed) {
        continue;
      }
      if (blockRange.intersectsRange(range)) {
        if (blockRange.containsRange(range)) {
          ranges = [range.cloneRange()];
          break;
        } else if (range.containsRange(blockRange)) {
          ranges.push(blockRange);
        } else {
          ranges.push(range.intersection(blockRange));
        }
      }
    }
    return ranges;
  };

  DecoratableBlockContainer.prototype.firstDecoratableRangeIn = function (
    range
  ) {
    return this.decoratableRangesIn(range)[0];
  };

  return DecoratableBlockContainer;
})();

TextRange = (function () {
  function TextRange(text1, startOffset1, endOffset1, data) {
    this.text = text1;
    this.startOffset = startOffset1;
    this.endOffset = endOffset1;
    this.data = data != null ? data : {};
  }

  TextRange.prototype.isCollapsed = function () {
    return this.startOffset > this.endOffset;
  };

  TextRange.prototype.setStartOffset = function (so) {
    var length, start;
    start = so - this.startOffset;
    length = this.text.length - start;
    if (start < 0) {
      throw 'I only know how to shrink ranges';
    }
    this.startOffset = so;
    return (this.text = this.text.substr(start, length));
  };

  TextRange.prototype.setEndOffset = function (eo) {
    var d, to;
    d = this.endOffset - eo;
    to = this.text.length - d - 1;
    if (d < 0) {
      throw 'I only know how to shrink ranges';
    }
    this.endOffset = eo;
    return (this.text = this.text.substring(0, to));
  };

  TextRange.prototype.intersects = function (other) {
    if (
      this.startOffset < other.startOffset &&
      this.endOffset > other.startOffset
    ) {
      return true;
    }
    if (
      this.startOffset >= other.startOffset &&
      this.startOffset < other.endOffset
    ) {
      return true;
    }
    return false;
  };

  TextRange.prototype.containsRange = function (other) {
    if (
      this.startOffset <= other.startOffset &&
      this.endOffset >= other.endOffset
    ) {
      return true;
    }
    return false;
  };

  TextRange.prototype.equalsRange = function (other) {
    if (
      this.startOffset === other.startOffset &&
      this.endOffset === other.endOffset
    ) {
      if (
        this.text === other.text &&
        JSON.stringify(this.data) === JSON.stringify(other.data)
      ) {
        return true;
      }
    }
    return false;
  };

  TextRange.prototype.cloneRange = function () {
    return new TextRange(
      this.text,
      this.startOffset,
      this.endOffset,
      this.data
    );
  };

  return TextRange;
})();

TextRangeFactory = (function () {
  function TextRangeFactory(decoratableContainer) {
    this.decoratableContainer = decoratableContainer;
  }

  TextRangeFactory.prototype.createFromRangyRange = function (range) {
    var endOffset, rangeText, ref, startOffset;
    rangeText = Util.rangeText(range);
    (ref = Util.textOffsets(this.decoratableContainer.textNodes(), range)),
      (startOffset = ref[0]),
      (endOffset = ref[1]);
    return new TextRange(rangeText, startOffset, endOffset);
  };

  return TextRangeFactory;
})();

HighlightedTextRangeList = (function () {
  function HighlightedTextRangeList() {
    this.list = [];
  }

  HighlightedTextRangeList.prototype.clear = function () {
    return (this.list = []);
  };

  HighlightedTextRangeList.prototype.push = function (highlightedTextRange) {
    if (!this.includes(highlightedTextRange)) {
      return this.list.push(highlightedTextRange);
    }
  };

  HighlightedTextRangeList.prototype.pull = function (rangeToPull) {
    var inf = 0; // don't break user's browser!!
    var i = 0;
    var existingRange = this.list[i++];
    while (existingRange !== undefined) {
      inf++;
      if (inf > 30) break;
      // console.log(existingRange);
      if (existingRange.intersects(rangeToPull)) {
        if (rangeToPull.containsRange(existingRange)) {
          this.list.splice(--i, 1);
        } else if (existingRange.containsRange(rangeToPull)) {
          newRange = existingRange.cloneRange();
          existingRange.setEndOffset(rangeToPull.startOffset - 1);
          newRange.setStartOffset(rangeToPull.endOffset + 1);
          this.list.splice(i++, 0, newRange);
        } else if (existingRange.startOffset < rangeToPull.startOffset) {
          existingRange.setEndOffset(rangeToPull.startOffset - 1);
        } else {
          existingRange.setStartOffset(rangeToPull.endOffset + 1);
        }
      }
      existingRange = this.list[i++];
    }
    return null;
  };

  HighlightedTextRangeList.prototype.includes = function (other) {
    var item, j, len, ref;
    ref = this.list;
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      if (item.equalsRange(other)) {
        return true;
      }
    }
    return false;
  };

  HighlightedTextRangeList.prototype.each = function (func) {
    var item, j, len, ref, results;
    ref = this.list;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      results.push(func(item));
    }
    return results;
  };

  HighlightedTextRangeList.prototype.asJSON = function () {
    return {
      list: this.list,
    };
  };

  HighlightedTextRangeList.prototype.fromJSON = function (jsonObject) {
    var j, len, o, ref, results;
    this.clear();
    ref = jsonObject.list;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      o = ref[j];
      results.push(
        this.list.push(
          new TextRange(o.text, o.startOffset, o.endOffset, o.data)
        )
      );
    }
    return results;
  };

  return HighlightedTextRangeList;
})();

AnnotatedTextRangeList = (function () {
  function AnnotatedTextRangeList() {
    this.map = {};
  }

  AnnotatedTextRangeList.prototype.clear = function () {
    return (this.map = {});
  };

  AnnotatedTextRangeList.prototype.push = function (annotatedTextRange) {
    return (this.map[annotatedTextRange.startOffset] = annotatedTextRange);
  };

  AnnotatedTextRangeList.prototype.pull = function (annotatedTextRange) {
    return delete this.map[annotatedTextRange.startOffset];
  };

  AnnotatedTextRangeList.prototype.list = function () {
    var offset, range, ref, rv;
    rv = [];
    ref = this.map;
    for (offset in ref) {
      range = ref[offset];
      rv.push(range);
    }
    rv.sort(function (a, b) {
      return a.startOffset - b.startOffset;
    });
    return rv;
  };

  AnnotatedTextRangeList.prototype.each = function (func) {
    var item, j, len, ref, results;
    ref = this.list();
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];
      results.push(func(item));
    }
    return results;
  };

  AnnotatedTextRangeList.prototype.asJSON = function () {
    return {
      map: this.map,
    };
  };

  AnnotatedTextRangeList.prototype.fromJSON = function (jsonObject) {
    var o, offset, ref, results;
    this.clear();
    ref = jsonObject.map;
    results = [];
    for (offset in ref) {
      o = ref[offset];
      results.push(
        (this.map[offset] = new TextRange(
          o.text,
          o.startOffset,
          o.endOffset,
          o.data
        ))
      );
    }
    return results;
  };

  return AnnotatedTextRangeList;
})();

RemoteStorageAPI = (function () {
  function RemoteStorageAPI(env, savePath, loadPath) {
    this.env = env;
    this.savePath = savePath;
    this.loadPath = loadPath;
  }

  RemoteStorageAPI.prototype.save = function (key, value, success, error) {
    return jQuery.ajax({
      url: this.savePath,
      type: 'POST',
      dataType: 'json',
      data: {
        key: key,
        value: value,
      },
      success: success,
      error: error,
    });
  };

  RemoteStorageAPI.prototype.load = function (key, success, complete, error) {
    return jQuery.ajax({
      url: this.loadPath,
      type: 'GET',
      dataType: 'json',
      data: {
        key: key,
      },
      success: success,
      complete: complete,
      error: error,
    });
  };

  return RemoteStorageAPI;
})();

RemoteStorage = (function () {
  function RemoteStorage(env, contentId, userId, savePath, loadPath) {
    this.env = env;
    this.contentId = contentId;
    this.userId = userId;
    this.savePath = savePath;
    this.loadPath = loadPath;
    this.api = new RemoteStorageAPI(this.env, this.savePath, this.loadPath);
    this.key = 'userId:' + this.userId + ';contentId:' + this.contentId;
  }

  RemoteStorage.prototype.save = function (object) {
    return this.api.save(this.key, JSON.stringify(object));
  };

  RemoteStorage.prototype.load = function (successCallback, completeCallback) {
    var complete, success;
    success = function (jsonData) {
      var e;
      try {
        return successCallback(jsonData);
      } catch (error1) {
        e = error1;
        return typeof console !== 'undefined' && console !== null
          ? console.log(e)
          : void 0;
      }
    };
    complete = completeCallback;
    return this.api.load(this.key, success, complete);
  };

  return RemoteStorage;
})();

Controller = (function () {
  function Controller(app, contentId, userId, savePath, loadPath) {
    this.app = app;
    this.contentId = contentId;
    this.userId = userId;
    this.savePath = savePath;
    this.loadPath = loadPath;
    this.ready = false;
    this.highlightedTextRangeList = new HighlightedTextRangeList();
    this.annotatedTextRangeList = new AnnotatedTextRangeList();
    this.remoteStorage = new RemoteStorage(
      this.app.env,
      this.contentId,
      this.userId,
      this.savePath,
      this.loadPath
    );
    this.loadFromRemoteStorage();
  }

  Controller.prototype.getHighlightedTextRanges = function () {
    return this.highlightedTextRangeList;
  };

  Controller.prototype.getAnnotatedTextRanges = function () {
    return this.annotatedTextRangeList;
  };

  Controller.prototype.highlightTextRange = function (textRange, color) {
    textRange.data.color = color;
    this.highlightedTextRangeList.push(textRange);
    return true;
  };

  Controller.prototype.unHighlightTextRange = function (textRange) {
    this.highlightedTextRangeList.pull(textRange);
    return true;
  };

  Controller.prototype.annotateTextRange = function (textRange, annotation) {
    textRange.data.annotation = annotation;
    this.annotatedTextRangeList.push(textRange);
    return true;
  };

  Controller.prototype.unannotateTextRange = function (textRange) {
    this.annotatedTextRangeList.pull(textRange);
    return true;
  };

  Controller.prototype.saveToRemoteStorage = function () {
    var o;
    o = {
      highlightedTextRangeList: this.highlightedTextRangeList.asJSON(),
      annotatedTextRangeList: this.annotatedTextRangeList.asJSON(),
    };
    return this.remoteStorage.save(o);
  };

  Controller.prototype.loadFromRemoteStorage = function () {
    var loadFunction;
    loadFunction = (function (_this) {
      return function (o) {
        if (o.highlightedTextRangeList) {
          _this.highlightedTextRangeList.fromJSON(o.highlightedTextRangeList);
        }
        if (o.annotatedTextRangeList) {
          return _this.annotatedTextRangeList.fromJSON(
            o.annotatedTextRangeList
          );
        }
      };
    })(this);
    return this.remoteStorage.load(
      loadFunction,
      (function (_this) {
        return function () {
          return (_this.ready = true);
        };
      })(this)
    );
  };

  return Controller;
})();

RangyRangeFactory = (function () {
  function RangyRangeFactory(decoratableContainer) {
    this.decoratableContainer = decoratableContainer;
  }

  RangyRangeFactory.prototype.createFromTextRange = function (textRange) {
    var endTextOffset,
      foundEnd,
      foundStart,
      j,
      len,
      node,
      offset,
      range,
      ref,
      startTextOffset,
      textEnd,
      textStart;
    startTextOffset = textRange.startOffset;
    endTextOffset = textRange.endOffset;
    range = rangy.createRange();
    foundStart = false;
    foundEnd = false;
    textStart = 0;
    textEnd = -1;
    ref = this.decoratableContainer.textNodes();
    for (j = 0, len = ref.length; j < len; j++) {
      node = ref[j];
      textEnd += node.data.length;
      if (
        !foundStart &&
        startTextOffset >= textStart &&
        startTextOffset <= textEnd
      ) {
        offset = startTextOffset - textStart;
        range.setStart(node, offset);
        foundStart = true;
        if (textRange.isCollapsed()) {
          range.setEnd(node, offset);
          foundEnd = true;
        }
      }
      if (!foundEnd && endTextOffset >= textStart && endTextOffset <= textEnd) {
        range.setEnd(node, endTextOffset + 1 - textStart);
        foundEnd = true;
        break;
      }
      textStart += node.data.length;
    }
    if (!foundStart || !foundEnd) {
      if (typeof console !== 'undefined' && console !== null) {
        console.log(textRange);
      }
      if (typeof console !== 'undefined' && console !== null) {
        console.warn('Could not fully create rangyRange!');
      }
      range = null;
    }
    return range;
  };

  return RangyRangeFactory;
})();

UIAnnotationWidgetConflictResolver = {
  resolveConflicts: function (widgets) {
    var $widgets, delta, i;
    $widgets = $(widgets);
    $widgets.sort(function (a, b) {
      var atop, btop;
      atop = parseInt(a.el.style.marginTop);
      btop = parseInt(b.el.style.marginTop);
      if (atop < btop) {
        return -1;
      }
      if (atop === btop) {
        return 0;
      }
      if (atop > btop) {
        return 1;
      }
    });
    i = 0;
    delta = [];
    $widgets.each(function (idx, widget) {
      var x, y;
      x = parseInt(widget.el.style.marginTop);
      y = x + parseInt(widget.el.offsetHeight);
      if (x >= i) {
        delta[idx] = 0;
      } else {
        delta[idx] = i - x;
      }
      return (i = y + 1 + delta[idx]);
    });
    return $widgets.each(function (idx, widget) {
      var d, iTop;
      d = delta[idx];
      iTop = parseInt(widget.el.style.marginTop);
      iTop += d;
      return (widget.el.style.marginTop = '' + iTop + 'px');
    });
  },
};

UIAnnotationWidget = (function () {
  function UIAnnotationWidget(ui, textRange1) {
    var $el, $textarea, template;
    this.ui = ui;
    this.textRange = textRange1;
    template =
      '<div class="annotation rs_preserve rs_skip"> <span class="instruction">Click to add a note...</span> <textarea></textarea> </div>';
    $el = $(template);
    this.el = $el[0];
    $textarea = $el.find('textarea');
    $textarea.hide();
    $(this.ui.rootNode).append($el);
    $textarea.autogrow();
    $el.click(
      (function (_this) {
        return function (e) {
          if (_this.ui.currentTextRange !== _this.textRange) {
            _this.ui.onBlur(true, true);
          }
          _this.showText(true);
          return false;
        };
      })(this)
    );
    $textarea.blur(
      (function (_this) {
        return function (e) {
          _this.ui.currentTextRange = _this.textRange;
          return _this.ui.onAnnotation(e);
        };
      })(this)
    );
  }

  UIAnnotationWidget.prototype.setOffset = function (offset) {
    var $el;
    this.offset = offset;
    return ($el = $(this.el));
  };

  UIAnnotationWidget.prototype.setText = function (text) {
    var $textarea;
    this.text = text;
    $textarea = $(this.el).find('textarea');
    $textarea.val(text);
    if (this.text !== '') {
      this.showText();
    }
    return $textarea.change();
  };

  UIAnnotationWidget.prototype.showText = function (focus) {
    var $el, $textarea;
    $el = $(this.el);
    $el.find('.instruction').hide();
    $textarea = $el.find('textarea');
    $textarea.show();
    if (focus) {
      return $textarea.focus();
    }
  };

  UIAnnotationWidget.prototype.isBlank = function () {
    return $(this.el).find('textarea').val() === '';
  };

  UIAnnotationWidget.prototype.remove = function () {
    return $(this.el).remove();
  };

  UIAnnotationWidget.prototype.render = function () {
    var $container,
      $el,
      containerEdge,
      marginLeft,
      marginTop,
      pos,
      range,
      snapContent,
      width;
    $el = $(this.el);
    range = this.ui.rangyRangeFactory.createFromTextRange(this.textRange);
    if (!range) {
      return;
    }
    pos = this._getRangePosition(range);
    $container = $(this.ui.containerNode);
    containerEdge =
      $container.offset().left -
      $container.position().left +
      $container.outerWidth();
    snapContent = document.getElementById('snap-content');
    if (snapContent) {
      containerEdge -= $(snapContent).offset().left;
    }
    width = Math.max(
      $(this.ui.rootNode).outerWidth() - containerEdge - 20,
      294
    );
    marginTop = pos.top;
    marginLeft = containerEdge + 10;
    return $el.width(width).css({
      'margin-top': marginTop,
      'margin-left': marginLeft,
    });
  };

  UIAnnotationWidget.prototype._getRangePosition = function (range) {
    var $marker, $markerOffset, $rootOffset, clonedRange, left, top;
    $marker = jQuery('<span>\ufeff</span>').css({
      lineHeight: '0',
    });
    clonedRange = range.cloneRange();
    clonedRange.collapse(true);
    if (
      clonedRange.commonAncestorContainer.parentNode.className ===
      'rangySelectionBoundary'
    ) {
      clonedRange.setStartAfter(clonedRange.commonAncestorContainer.parentNode);
    }
    clonedRange.insertNode($marker[0]);
    $rootOffset = $(this.ui.rootNode).offset();
    $markerOffset = $marker.offset();
    top = $markerOffset.top - $rootOffset.top;
    left = $markerOffset.left - $rootOffset.left;
    $marker.remove();
    this.ui.containerNode.normalize();
    clonedRange.detach();
    return {
      top: top,
      left: left,
    };
  };

  return UIAnnotationWidget;
})();

UIAnnotationWidgetManager = (function () {
  function UIAnnotationWidgetManager(ui) {
    this.ui = ui;
    this.widgets = {};
    $(document).bind(
      'autogrow:update',
      (function (_this) {
        return function (e) {
          return _this.renderWidgets();
        };
      })(this)
    );
  }

  UIAnnotationWidgetManager.prototype.buildWidget = function (textRange) {
    var offset, widget;
    offset = textRange.startOffset;
    if (this.widgets[offset]) {
      throw 'Cannot build widget that already exists!';
    }
    widget = new UIAnnotationWidget(this.ui, textRange);
    this.widgets[offset] = widget;
    this.renderWidgets();
    return widget;
  };

  UIAnnotationWidgetManager.prototype.createWidget = function (
    textRange,
    text
  ) {
    var widget;
    widget = this.buildWidget(textRange);
    return widget.setText(text);
  };

  UIAnnotationWidgetManager.prototype.findWidget = function (textRange) {
    var offset;
    offset = textRange.startOffset;
    return this.widgets[offset];
  };

  UIAnnotationWidgetManager.prototype.removeWidget = function (textRange) {
    var offset, widget;
    offset = textRange.startOffset;
    widget = this.widgets[offset];
    if (widget) {
      widget.remove();
      delete this.widgets[offset];
      this.renderWidgets();
    }
    return widget;
  };

  UIAnnotationWidgetManager.prototype.renderWidgets = function () {
    var list, offset, ref, widget;
    this.ui.saveCurrentRanges();
    list = [];
    ref = this.widgets;
    for (offset in ref) {
      widget = ref[offset];
      widget.render();
      list.push(widget);
    }
    this.resolveWidgetConflicts(list);
    return this.ui.restoreCurrentRanges();
  };

  UIAnnotationWidgetManager.prototype.resolveWidgetConflicts = function (
    widgets
  ) {
    return UIAnnotationWidgetConflictResolver.resolveConflicts(widgets);
  };

  UIAnnotationWidgetManager.prototype.annotationWidgetWasClicked = function (
    e
  ) {
    return $(e.target).closest('.annotation').length > 0;
  };

  return UIAnnotationWidgetManager;
})();

UIAnnotationManager = (function () {
  function UIAnnotationManager(ui) {
    this.ui = ui;
    this.widgetManager = new UIAnnotationWidgetManager(this.ui);
    $(window).resize(
      (function (_this) {
        return function (e) {
          return _this.widgetManager.renderWidgets();
        };
      })(this)
    );
  }

  UIAnnotationManager.prototype.findOrBuildAnnotation = function (textRange) {
    return (
      this.widgetManager.findWidget(textRange) ||
      this.widgetManager.buildWidget(textRange)
    );
  };

  UIAnnotationManager.prototype.createAnnotation = function (textRange, text) {
    return this.widgetManager.createWidget(textRange, text);
  };

  UIAnnotationManager.prototype.removeAnnotation = function (textRange) {
    return this.widgetManager.removeWidget(textRange);
  };

  UIAnnotationManager.prototype.removeAnnotationIfBlank = function (textRange) {
    var widget;
    widget = this.widgetManager.findWidget(textRange);
    if (widget && widget.isBlank()) {
      return this.widgetManager.removeWidget(textRange);
    }
  };

  UIAnnotationManager.prototype.annotationWasClicked = function (e) {
    return this.widgetManager.annotationWidgetWasClicked(e);
  };

  return UIAnnotationManager;
})();

UIHighlightMenu = (function () {
  function UIHighlightMenu(ui) {
    var $highlightMenu, menu, menuTemplate;
    this.ui = ui;
    this.menuSelector = '#rangy_decorator_highlight_menu_group';
    menuTemplate =
      '<div id="rangy_decorator_highlight_menu_group" class="rs_preserve rs_skip"> <div id="rangy_decorator_highlight_menu_items"> <div id="rangy_decorator_highlight_menu_yellow_swatch" class="rangy_decorator_highlight_menu_swatch"> <div class="rangy_decorator_highlight_menu_swatch_label">y</div> </div> <div id="rangy_decorator_highlight_menu_green_swatch" class="rangy_decorator_highlight_menu_swatch"> <div class="rangy_decorator_highlight_menu_swatch_label">g</div> </div> <div id="rangy_decorator_highlight_menu_red_swatch" class="rangy_decorator_highlight_menu_swatch"> <div class="rangy_decorator_highlight_menu_swatch_label">r</div> </div> <div id="rangy_decorator_highlight_menu_white_swatch" class="rangy_decorator_highlight_menu_swatch"> <div class="rangy_decorator_highlight_menu_swatch_label">w</div> </div> <div id="rangy_decorator_highlight_menu_copy_to_clipboard" class="rangy_decorator_highlight_menu_swatch"> <div class="rangy_decorator_highlight_menu_swatch_label">copy</div> </div> </div> <div id="rangy_decorator_highlight_menu_arrow"> <div id="rangy_decorator_highlight_menu_arrow_inner"></div> </div> </div>';
    $highlightMenu = $(menuTemplate);
    $(this.ui.rootNode).append($highlightMenu);
    $(this.menuSelector)
      .on(
        'click',
        '#rangy_decorator_highlight_menu_yellow_swatch',
        (function (_this) {
          return function (e) {
            return _this.ui.onHighlight('yellow');
          };
        })(this)
      )
      .on(
        'click',
        '#rangy_decorator_highlight_menu_green_swatch',
        (function (_this) {
          return function (e) {
            return _this.ui.onHighlight('green');
          };
        })(this)
      )
      .on(
        'click',
        '#rangy_decorator_highlight_menu_red_swatch',
        (function (_this) {
          return function (e) {
            return _this.ui.onHighlight('red');
          };
        })(this)
      )
      .on(
        'click',
        '#rangy_decorator_highlight_menu_white_swatch',
        (function (_this) {
          return function (e) {
            return _this.ui.onUnHighlight();
          };
        })(this)
      )
      .on(
        'click',
        '#rangy_decorator_highlight_menu_copy_to_clipboard',
        (function (_this) {
          return function (e) {
            return (_this.ui.currentlySelectedText =
              _this.ui.currentSelection.toString());
          };
        })(this)
      );
    if (window.ClipboardJS != null && window.ClipboardJS.isSupported()) {
      this.ui.clipboard = new window.ClipboardJS(
        '#rangy_decorator_highlight_menu_copy_to_clipboard',
        {
          text: (function (_this) {
            return function (trigger) {
              return _this.ui.currentSelection.toString();
            };
          })(this),
        }
      );
      this.ui.clipboard.on(
        'success',
        (function (_this) {
          return function (e) {
            return _this.ui.onBlur(true, true);
          };
        })(this)
      );
      menu = document.getElementById('rangy_decorator_highlight_menu_items');
      menu.classList.add('five-items');
    }
  }

  UIHighlightMenu.prototype.show = function (pageX, pageY, target) {
    var lineHeight, marginLeft, marginTop, rootOffset;
    rootOffset = $(this.ui.rootNode).offset();
    lineHeight = parseInt($(target).css('line-height'));
    if (!lineHeight.number) {
      lineHeight = 27;
    }
    marginTop = pageY - rootOffset.top - 70 - lineHeight / 2;
    marginLeft = pageX - rootOffset.left - 85;
    return $(this.menuSelector)
      .css({
        'margin-top': marginTop,
        'margin-left': marginLeft,
      })
      .fadeIn(500);
  };

  UIHighlightMenu.prototype.hide = function () {
    return $(this.menuSelector).hide();
  };

  UIHighlightMenu.prototype.isVisible = function () {
    return $(this.menuSelector + ':visible').length > 0;
  };

  UIHighlightMenu.prototype.wasClicked = function (e) {
    return $(e.target).closest(this.menuSelector).length > 0;
  };

  return UIHighlightMenu;
})();

UIHighlightKeys = (function () {
  function UIHighlightKeys(ui) {
    this.ui = ui;
    $(document).keypress(
      (function (_this) {
        return function (e) {
          if (
            e.target.nodeName === 'INPUT' ||
            e.target.nodeName === 'TEXTAREA'
          ) {
            return true;
          }
          if (e.ctrlKey || e.altKey || e.metaKey) {
            return true;
          }
          if (e.originalEvent.repeat) {
            return true;
          }
          if (!_this.ui.currentTextRange) {
            return true;
          }
          if (e.which === 89 || e.which === 121) {
            _this.ui.onHighlight('yellow');
          }
          if (e.which === 71 || e.which === 103) {
            _this.ui.onHighlight('green');
          }
          if (e.which === 82 || e.which === 114) {
            _this.ui.onHighlight('red');
          }
          if (e.which === 87 || e.which === 119) {
            return _this.ui.onUnHighlight();
          }
        };
      })(this)
    );
  }

  return UIHighlightKeys;
})();

UIHighlighter = (function () {
  function UIHighlighter(ui) {
    var color, cssClass, j, len, ref;
    this.ui = ui;
    this.colors = ['yellow', 'green', 'red'];
    this.cssClassAppliers = {};
    ref = this.colors;
    for (j = 0, len = ref.length; j < len; j++) {
      color = ref[j];
      cssClass = color + '-highlighted-range';
      this.cssClassAppliers[color] = rangy.createCssClassApplier(cssClass, {
        normalize: false,
      });
    }
  }

  UIHighlighter.prototype.highlightRange = function (range, color) {
    var cssClassApplier;
    cssClassApplier = this.cssClassAppliers[color];
    if (cssClassApplier) {
      cssClassApplier.applyToRange(range);
      this.ui.containerNode.normalize();
    }
    $('svg text span').each(function () {
      return $(this).contents().unwrap();
    });
    return null;
  };

  UIHighlighter.prototype.unHighlightRange = function (range) {
    var color, j, len, ref;
    ref = this.colors;
    for (j = 0, len = ref.length; j < len; j++) {
      color = ref[j];
      this.cssClassAppliers[color].undoToRange(range);
    }
    return null;
  };

  return UIHighlighter;
})();

UI = (function () {
  function UI(app, rootNode, containerNode, controller) {
    var loadFunction;
    this.app = app;
    this.rootNode = rootNode;
    this.containerNode = containerNode;
    this.controller = controller;
    this.rootNode || (this.rootNode = document.body);
    rangy.init();
    Util.cleanNode(this.containerNode);
    if (this.app.selector) {
      this.decoratableContainer = new DecoratableBlockContainer(
        this.containerNode,
        this.app.selector
      );
    } else {
      this.decoratableContainer = new DecoratableBlockContainer(
        this.containerNode
      );
    }
    this.textRangeFactory = new TextRangeFactory(this.decoratableContainer);
    this.rangyRangeFactory = new RangyRangeFactory(this.decoratableContainer);
    this.highlightMenu = new UIHighlightMenu(this);
    this.highlightKeys = new UIHighlightKeys(this);
    this.highlighter = new UIHighlighter(this);
    this.annotationManager = new UIAnnotationManager(this);
    $(document).mouseup(
      (function (_this) {
        return function (e) {
          var range;
          if (_this.highlightMenu.isVisible()) {
            return true;
          }
          e.selection = rangy.getSelection();
          range = e.selection.getAllRanges()[0];
          if (!range) {
            return true;
          }
          if (window.ReadSpeaker != null) {
            _this.decoratableContainer.reload();
          }
          _this.decoratableContainer.fitRange(range);
          e.range = _this.decoratableContainer.firstDecoratableRangeIn(range);
          e.ranges = _this.decoratableContainer.decoratableRangesIn(range);
          if (_this.rangeIsValid(e.range)) {
            _this.onSelection(e);
          }
          return true;
        };
      })(this)
    );
    $(document).mousedown(
      (function (_this) {
        return function (e) {
          if (e.which === 3) {
            return;
          }
          if (!_this.currentTextRange) {
            return;
          }
          if (_this.highlightMenu.wasClicked(e)) {
            return;
          }
          if (_this.annotationManager.annotationWasClicked(e)) {
            _this.onBlur(true, false);
          } else {
            _this.onBlur(true, true);
          }
          return true;
        };
      })(this)
    );
    loadFunction = (function (_this) {
      return function () {
        if (_this.controller.ready) {
          window.clearInterval(_this.loadInterval);
          delete _this.loadInterval;
          _this.controller
            .getHighlightedTextRanges()
            .each(function (textRange) {
              var range;
              range = _this.rangyRangeFactory.createFromTextRange(textRange);
              if (range) {
                return _this.highlighter.highlightRange(
                  range,
                  textRange.data.color
                );
              }
            });
          _this.controller.getAnnotatedTextRanges().each(function (textRange) {
            return _this.annotationManager.createAnnotation(
              textRange,
              textRange.data.annotation
            );
          });
          return jQuery(document).triggerHandler('soomo.annotations.loaded');
        }
      };
    })(this);
    this.loadInterval = window.setInterval(loadFunction, 500);
  }

  UI.prototype.onSelection = function (e) {
    var showMenuAndAnnotation;
    this.currentSelection = e.selection;
    this.currentRange = e.range;
    this.currentRanges = e.ranges;
    this.currentTextRange = this.textRangeFactory.createFromRangyRange(e.range);
    showMenuAndAnnotation = (function (_this) {
      return function () {
        _this.highlightMenu.show(e.pageX, e.pageY, e.target);
        return _this.annotationManager.findOrBuildAnnotation(
          _this.currentTextRange
        );
      };
    })(this);
    return this._setTimeout(showMenuAndAnnotation, 500);
  };

  UI.prototype.onHighlight = function (color) {
    var e, j, len, range, ref, textRange;
    ref = this.currentRanges;
    for (j = 0, len = ref.length; j < len; j++) {
      range = ref[j];
      textRange = this.textRangeFactory.createFromRangyRange(range);
      if (!textRange.isCollapsed()) {
        this.controller.highlightTextRange(textRange, color);
        this.highlighter.highlightRange(range, color);
      }
    }
    jQuery(document).triggerHandler('soomo.annotations.highlight.created');
    this.controller.saveToRemoteStorage();
    this._clearTimeout();
    this.highlightMenu.hide();
    this.currentSelection.refresh();
    try {
      return this.currentSelection.removeAllRanges();
    } catch (error1) {
      e = error1;
    }
  };

  UI.prototype.onUnHighlight = function () {
    var e, j, len, range, ref, textRange;
    ref = this.currentRanges;
    for (j = 0, len = ref.length; j < len; j++) {
      range = ref[j];
      textRange = this.textRangeFactory.createFromRangyRange(range);
      if (!textRange.isCollapsed()) {
        this.controller.unHighlightTextRange(textRange);
        this.highlighter.unHighlightRange(range);
      }
    }
    this.controller.saveToRemoteStorage();
    this._clearTimeout();
    this.highlightMenu.hide();
    this.currentSelection.refresh();
    try {
      return this.currentSelection.removeAllRanges();
    } catch (error1) {
      e = error1;
    }
  };

  UI.prototype.onAnnotation = function (e) {
    var text, textRange;
    textRange =
      this.currentTextRange || this.annotationManager.currentTextRange;
    text = $(e.target).val();
    if (/^\s*$/.test(text)) {
      this.annotationManager.removeAnnotation(textRange);
      this.controller.unannotateTextRange(textRange);
      jQuery(document).triggerHandler('soomo.annotations.note.deleted');
    } else {
      this.controller.annotateTextRange(textRange, text);
      jQuery(document).triggerHandler('soomo.annotations.note.created');
    }
    return this.controller.saveToRemoteStorage();
  };

  UI.prototype.onBlur = function (cleanupHighlightMenu, cleanupNewAnnotation) {
    if (cleanupHighlightMenu == null) {
      cleanupHighlightMenu = true;
    }
    if (cleanupNewAnnotation == null) {
      cleanupNewAnnotation = false;
    }
    this._clearTimeout();
    if (cleanupHighlightMenu) {
      this.highlightMenu.hide();
      if (this.currentSelection) {
        this.currentSelection.refresh();
        this.currentSelection.removeAllRanges();
      }
    }
    if (cleanupNewAnnotation) {
      if (this.currentTextRange) {
        this.annotationManager.removeAnnotationIfBlank(this.currentTextRange);
      }
      delete this.currentSelection;
      delete this.currentRange;
      delete this.currentRanges;
      return delete this.currentTextRange;
    }
  };

  UI.prototype._setTimeout = function () {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    this._clearTimeout();
    return (this.timeout = window.setTimeout(args[0], args[1]));
  };

  UI.prototype._clearTimeout = function () {
    if (this.timeout) {
      window.clearTimeout(this.timeout);
      return delete this.timeout;
    }
  };

  UI.prototype.saveCurrentSelection = function () {
    var selectedRange;
    selectedRange = rangy.getSelection().getAllRanges()[0];
    if (selectedRange && !selectedRange.collapsed) {
      return (this.savedSelection = true);
    }
  };

  UI.prototype.restoreCurrentSelection = function () {
    var j, len, range, ref, sel;
    if (this.savedSelection && this.currentRanges) {
      sel = rangy.getSelection(window);
      sel.removeAllRanges();
      ref = this.currentRanges;
      for (j = 0, len = ref.length; j < len; j++) {
        range = ref[j];
        sel.addRange(range);
      }
      return delete this.savedSelection;
    }
  };

  UI.prototype.saveCurrentRanges = function () {
    var j, len, range, ref;
    this.saveCurrentSelection();
    if (this.currentRanges) {
      this.currentRangeInfos = [];
      ref = this.currentRanges;
      for (j = 0, len = ref.length; j < len; j++) {
        range = ref[j];
        this.currentRangeInfos.push(rangy.saveRange(range));
      }
      return delete this.currentRanges;
    }
  };

  UI.prototype.restoreCurrentRanges = function () {
    var info, j, len, range, ref;
    if (this.currentRangeInfos) {
      this.currentRanges = [];
      ref = this.currentRangeInfos;
      for (j = 0, len = ref.length; j < len; j++) {
        info = ref[j];
        range = rangy.restoreRange(info);
        if (!range.collapsed) {
          this.currentRanges.push(range);
        }
      }
      delete this.currentRangeInfos;
    }
    return this.restoreCurrentSelection();
  };

  UI.prototype.rangeIsValid = function (range) {
    var ancestor, j, len, ref;
    if (!(range && !range.collapsed)) {
      return false;
    }
    if (range.isValid) {
      return true;
    }
    if (range.commonAncestorContainer === this.containerNode) {
      return true;
    }
    range.isValid = false;
    ref = $(range.commonAncestorContainer).parents();
    for (j = 0, len = ref.length; j < len; j++) {
      ancestor = ref[j];
      if (ancestor === this.containerNode) {
        range.isValid = true;
        break;
      }
    }
    return range.isValid;
  };

  return UI;
})();

App = (function () {
  function App(
    env,
    rootNode,
    containerNode,
    contentId,
    userId,
    selector,
    savePath,
    loadPath
  ) {
    this.env = env;
    this.rootNode = rootNode;
    this.containerNode = containerNode;
    this.contentId = contentId;
    this.userId = userId;
    this.selector = selector;
    this.savePath = savePath;
    this.loadPath = loadPath;
    this.controller = new Controller(
      this,
      this.contentId,
      this.userId,
      this.savePath,
      this.loadPath
    );
    this.view = new UI(
      this,
      this.rootNode,
      this.containerNode,
      this.controller
    );
  }

  return App;
})();

rangy.createModule('CssClassApplierExtension', function (api, module) {
  api.requireModules(['CssClassApplier']);
  dom = api.dom;

  api.CssClassApplier.prototype.applyToTextNode = function (textNode) {
    var parent = textNode.parentNode;
    if (
      false &&
      parent.childNodes.length == 1 &&
      dom.arrayContains(this.tagNames, parent.tagName.toLowerCase())
    ) {
      addClass(parent, this.cssClass);
    } else {
      var el = this.createContainer(dom.getDocument(textNode));
      textNode.parentNode.insertBefore(el, textNode);
      el.appendChild(textNode);
    }
  };
});
/*!
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <jevin9@gmail.com> wrote this file. As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return. Jevin O. Sewaruth
 * ----------------------------------------------------------------------------
 *
 * Autogrow Textarea Plugin Version v2.0
 * http://www.technoreply.com/autogrow-textarea-plugin-version-2-0
 *
 * Date: March 13, 2011
 */
jQuery.fn.autoGrow = function () {
  return this.each(function () {
    // Variables
    var colsDefault = this.cols;
    var rowsDefault = this.rows;

    //Functions
    var grow = function () {
      growByRef(this);
    };

    var growByRef = function (obj) {
      var linesCount = 0;
      var lines = obj.value.split('\n');

      for (var i = lines.length - 1; i >= 0; --i) {
        linesCount += Math.floor(lines[i].length / colsDefault + 1);
      }

      if (linesCount >= rowsDefault) obj.rows = linesCount + 1;
      else obj.rows = rowsDefault;
    };

    var characterWidth = function (obj) {
      var characterWidth = 0;
      var temp1 = 0;
      var temp2 = 0;
      var tempCols = obj.cols;

      obj.cols = 1;
      temp1 = obj.offsetWidth;
      obj.cols = 2;
      temp2 = obj.offsetWidth;
      characterWidth = temp2 - temp1;
      obj.cols = tempCols;

      return characterWidth;
    };

    // Manipulations
    //this.style.width = "auto";
    this.style.height = 'auto';
    this.style.overflow = 'hidden';
    // this.style.width = ((characterWidth(this) * this.cols) + 6) + "px";
    this.onkeyup = grow;
    this.onfocus = grow;
    this.onblur = grow;
    growByRef(this);
  });
};
(function ($) {
  /**
   * Auto-growing textareas; technique ripped from Facebook
   *
   * http://github.com/jaz303/jquery-grab-bag/tree/master/javascripts/jquery.autogrow-textarea.js
   */
  $.fn.autogrow = function (options) {
    return this.filter('textarea').each(function () {
      var self = this;
      var $self = $(self);
      var minHeight = $self.height();
      var noFlickerPad = $self.hasClass('autogrow-short')
        ? 0
        : parseInt($self.css('lineHeight')) + 4;

      var shadow = $('<div></div>')
        .css({
          position: 'absolute',
          top: -10000,
          left: -10000,
          width: $self.width(),
          fontSize: $self.css('fontSize'),
          fontFamily: $self.css('fontFamily'),
          fontWeight: $self.css('fontWeight'),
          lineHeight: $self.css('lineHeight'),
          resize: 'none',
        })
        .appendTo(document.body);

      var update = function () {
        var times = function (string, number) {
          for (var i = 0, r = ''; i < number; i++) r += string;
          return r;
        };

        var val = self.value
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/&/g, '&amp;')
          .replace(/\n$/, '<br/>&nbsp;')
          .replace(/\n/g, '<br/>')
          .replace(/ {2,}/g, function (space) {
            return times('&nbsp;', space.length - 1) + ' ';
          });

        shadow.css('width', $self.width());
        shadow.html(val);

        var prevHeight = parseInt($self.css('height').replace('px', ''));
        var nextHeight = Math.max(shadow.height() + noFlickerPad, minHeight);

        if (prevHeight !== nextHeight) {
          $self.css('height', nextHeight);
          $(document).trigger('autogrow:update');
        }
      };

      $self.change(update).keyup(update).keydown(update);
      $(window).resize(update);

      update();
    });
  };
})(jQuery);
(function () {
  function diff_match_patch() {
    this.Diff_Timeout = 1;
    this.Diff_EditCost = 4;
    this.Match_Threshold = 0.5;
    this.Match_Distance = 1e3;
    this.Patch_DeleteThreshold = 0.5;
    this.Patch_Margin = 4;
    this.Match_MaxBits = 32;
  }
  diff_match_patch.prototype.diff_main = function (a, b, c, d) {
    'undefined' == typeof d &&
      (d =
        0 >= this.Diff_Timeout
          ? Number.MAX_VALUE
          : new Date().getTime() + 1e3 * this.Diff_Timeout);
    if (null == a || null == b) throw Error('Null input. (diff_main)');
    if (a == b) return a ? [[0, a]] : [];
    'undefined' == typeof c && (c = !0);
    var e = c,
      f = this.diff_commonPrefix(a, b),
      c = a.substring(0, f),
      a = a.substring(f),
      b = b.substring(f),
      f = this.diff_commonSuffix(a, b),
      g = a.substring(a.length - f),
      a = a.substring(0, a.length - f),
      b = b.substring(0, b.length - f),
      a = this.diff_compute_(a, b, e, d);
    c && a.unshift([0, c]);
    g && a.push([0, g]);
    this.diff_cleanupMerge(a);
    return a;
  };
  diff_match_patch.prototype.diff_compute_ = function (a, b, c, d) {
    if (!a) return [[1, b]];
    if (!b) return [[-1, a]];
    var e = a.length > b.length ? a : b,
      f = a.length > b.length ? b : a,
      g = e.indexOf(f);
    if (-1 != g)
      return (
        (c = [
          [1, e.substring(0, g)],
          [0, f],
          [1, e.substring(g + f.length)],
        ]),
        a.length > b.length && (c[0][0] = c[2][0] = -1),
        c
      );
    if (1 == f.length)
      return [
        [-1, a],
        [1, b],
      ];
    return (e = this.diff_halfMatch_(a, b))
      ? ((f = e[0]),
        (a = e[1]),
        (g = e[2]),
        (b = e[3]),
        (e = e[4]),
        (f = this.diff_main(f, g, c, d)),
        (c = this.diff_main(a, b, c, d)),
        f.concat([[0, e]], c))
      : c && 100 < a.length && 100 < b.length
      ? this.diff_lineMode_(a, b, d)
      : this.diff_bisect_(a, b, d);
  };
  diff_match_patch.prototype.diff_lineMode_ = function (a, b, c) {
    var d = this.diff_linesToChars_(a, b),
      a = d.chars1,
      b = d.chars2,
      d = d.lineArray,
      a = this.diff_main(a, b, !1, c);
    this.diff_charsToLines_(a, d);
    this.diff_cleanupSemantic(a);
    a.push([0, '']);
    for (var e = (d = b = 0), f = '', g = ''; b < a.length; ) {
      switch (a[b][0]) {
        case 1:
          e++;
          g += a[b][1];
          break;
        case -1:
          d++;
          f += a[b][1];
          break;
        case 0:
          if (1 <= d && 1 <= e) {
            a.splice(b - d - e, d + e);
            b = b - d - e;
            d = this.diff_main(f, g, !1, c);
            for (e = d.length - 1; 0 <= e; e--) a.splice(b, 0, d[e]);
            b += d.length;
          }
          d = e = 0;
          g = f = '';
      }
      b++;
    }
    a.pop();
    return a;
  };
  diff_match_patch.prototype.diff_bisect_ = function (a, b, c) {
    for (
      var d = a.length,
        e = b.length,
        f = Math.ceil((d + e) / 2),
        g = f,
        h = 2 * f,
        j = Array(h),
        i = Array(h),
        k = 0;
      k < h;
      k++
    )
      (j[k] = -1), (i[k] = -1);
    j[g + 1] = 0;
    i[g + 1] = 0;
    for (
      var k = d - e, p = 0 != k % 2, q = 0, s = 0, o = 0, v = 0, u = 0;
      u < f && !(new Date().getTime() > c);
      u++
    ) {
      for (var n = -u + q; n <= u - s; n += 2) {
        var l = g + n,
          m;
        m =
          n == -u || (n != u && j[l - 1] < j[l + 1]) ? j[l + 1] : j[l - 1] + 1;
        for (var r = m - n; m < d && r < e && a.charAt(m) == b.charAt(r); )
          m++, r++;
        j[l] = m;
        if (m > d) s += 2;
        else if (r > e) q += 2;
        else if (p && ((l = g + k - n), 0 <= l && l < h && -1 != i[l])) {
          var t = d - i[l];
          if (m >= t) return this.diff_bisectSplit_(a, b, m, r, c);
        }
      }
      for (n = -u + o; n <= u - v; n += 2) {
        l = g + n;
        t =
          n == -u || (n != u && i[l - 1] < i[l + 1]) ? i[l + 1] : i[l - 1] + 1;
        for (
          m = t - n;
          t < d && m < e && a.charAt(d - t - 1) == b.charAt(e - m - 1);

        )
          t++, m++;
        i[l] = t;
        if (t > d) v += 2;
        else if (m > e) o += 2;
        else if (
          !p &&
          ((l = g + k - n),
          0 <= l &&
            l < h &&
            -1 != j[l] &&
            ((m = j[l]), (r = g + m - l), (t = d - t), m >= t))
        )
          return this.diff_bisectSplit_(a, b, m, r, c);
      }
    }
    return [
      [-1, a],
      [1, b],
    ];
  };
  diff_match_patch.prototype.diff_bisectSplit_ = function (a, b, c, d, e) {
    var f = a.substring(0, c),
      g = b.substring(0, d),
      a = a.substring(c),
      b = b.substring(d),
      f = this.diff_main(f, g, !1, e),
      e = this.diff_main(a, b, !1, e);
    return f.concat(e);
  };
  diff_match_patch.prototype.diff_linesToChars_ = function (a, b) {
    function c(a) {
      for (var b = '', c = 0, f = -1, g = d.length; f < a.length - 1; ) {
        f = a.indexOf('\n', c);
        -1 == f && (f = a.length - 1);
        var q = a.substring(c, f + 1),
          c = f + 1;
        (e.hasOwnProperty ? e.hasOwnProperty(q) : void 0 !== e[q])
          ? (b += String.fromCharCode(e[q]))
          : ((b += String.fromCharCode(g)), (e[q] = g), (d[g++] = q));
      }
      return b;
    }
    var d = [],
      e = {};
    d[0] = '';
    var f = c(a),
      g = c(b);
    return { chars1: f, chars2: g, lineArray: d };
  };
  diff_match_patch.prototype.diff_charsToLines_ = function (a, b) {
    for (var c = 0; c < a.length; c++) {
      for (var d = a[c][1], e = [], f = 0; f < d.length; f++)
        e[f] = b[d.charCodeAt(f)];
      a[c][1] = e.join('');
    }
  };
  diff_match_patch.prototype.diff_commonPrefix = function (a, b) {
    if (!a || !b || a.charAt(0) != b.charAt(0)) return 0;
    for (var c = 0, d = Math.min(a.length, b.length), e = d, f = 0; c < e; )
      a.substring(f, e) == b.substring(f, e) ? (f = c = e) : (d = e),
        (e = Math.floor((d - c) / 2 + c));
    return e;
  };
  diff_match_patch.prototype.diff_commonSuffix = function (a, b) {
    if (!a || !b || a.charAt(a.length - 1) != b.charAt(b.length - 1)) return 0;
    for (var c = 0, d = Math.min(a.length, b.length), e = d, f = 0; c < e; )
      a.substring(a.length - e, a.length - f) ==
      b.substring(b.length - e, b.length - f)
        ? (f = c = e)
        : (d = e),
        (e = Math.floor((d - c) / 2 + c));
    return e;
  };
  diff_match_patch.prototype.diff_commonOverlap_ = function (a, b) {
    var c = a.length,
      d = b.length;
    if (0 == c || 0 == d) return 0;
    c > d ? (a = a.substring(c - d)) : c < d && (b = b.substring(0, c));
    c = Math.min(c, d);
    if (a == b) return c;
    for (var d = 0, e = 1; ; ) {
      var f = a.substring(c - e),
        f = b.indexOf(f);
      if (-1 == f) return d;
      e += f;
      if (0 == f || a.substring(c - e) == b.substring(0, e)) (d = e), e++;
    }
  };
  diff_match_patch.prototype.diff_halfMatch_ = function (a, b) {
    function c(a, b, c) {
      for (
        var d = a.substring(c, c + Math.floor(a.length / 4)),
          e = -1,
          g = '',
          h,
          j,
          n,
          l;
        -1 != (e = b.indexOf(d, e + 1));

      ) {
        var m = f.diff_commonPrefix(a.substring(c), b.substring(e)),
          r = f.diff_commonSuffix(a.substring(0, c), b.substring(0, e));
        g.length < r + m &&
          ((g = b.substring(e - r, e) + b.substring(e, e + m)),
          (h = a.substring(0, c - r)),
          (j = a.substring(c + m)),
          (n = b.substring(0, e - r)),
          (l = b.substring(e + m)));
      }
      return 2 * g.length >= a.length ? [h, j, n, l, g] : null;
    }
    if (0 >= this.Diff_Timeout) return null;
    var d = a.length > b.length ? a : b,
      e = a.length > b.length ? b : a;
    if (4 > d.length || 2 * e.length < d.length) return null;
    var f = this,
      g = c(d, e, Math.ceil(d.length / 4)),
      d = c(d, e, Math.ceil(d.length / 2)),
      h;
    if (!g && !d) return null;
    h = d ? (g ? (g[4].length > d[4].length ? g : d) : d) : g;
    var j;
    a.length > b.length
      ? ((g = h[0]), (d = h[1]), (e = h[2]), (j = h[3]))
      : ((e = h[0]), (j = h[1]), (g = h[2]), (d = h[3]));
    h = h[4];
    return [g, d, e, j, h];
  };
  diff_match_patch.prototype.diff_cleanupSemantic = function (a) {
    for (
      var b = !1, c = [], d = 0, e = null, f = 0, g = 0, h = 0, j = 0, i = 0;
      f < a.length;

    )
      0 == a[f][0]
        ? ((c[d++] = f), (g = j), (h = i), (i = j = 0), (e = a[f][1]))
        : (1 == a[f][0] ? (j += a[f][1].length) : (i += a[f][1].length),
          e &&
            e.length <= Math.max(g, h) &&
            e.length <= Math.max(j, i) &&
            (a.splice(c[d - 1], 0, [-1, e]),
            (a[c[d - 1] + 1][0] = 1),
            d--,
            d--,
            (f = 0 < d ? c[d - 1] : -1),
            (i = j = h = g = 0),
            (e = null),
            (b = !0))),
        f++;
    b && this.diff_cleanupMerge(a);
    this.diff_cleanupSemanticLossless(a);
    for (f = 1; f < a.length; ) {
      if (-1 == a[f - 1][0] && 1 == a[f][0]) {
        b = a[f - 1][1];
        c = a[f][1];
        d = this.diff_commonOverlap_(b, c);
        e = this.diff_commonOverlap_(c, b);
        if (d >= e) {
          if (d >= b.length / 2 || d >= c.length / 2)
            a.splice(f, 0, [0, c.substring(0, d)]),
              (a[f - 1][1] = b.substring(0, b.length - d)),
              (a[f + 1][1] = c.substring(d)),
              f++;
        } else if (e >= b.length / 2 || e >= c.length / 2)
          a.splice(f, 0, [0, b.substring(0, e)]),
            (a[f - 1][0] = 1),
            (a[f - 1][1] = c.substring(0, c.length - e)),
            (a[f + 1][0] = -1),
            (a[f + 1][1] = b.substring(e)),
            f++;
        f++;
      }
      f++;
    }
  };
  diff_match_patch.prototype.diff_cleanupSemanticLossless = function (a) {
    function b(a, b) {
      if (!a || !b) return 6;
      var c = a.charAt(a.length - 1),
        d = b.charAt(0),
        e = c.match(diff_match_patch.nonAlphaNumericRegex_),
        f = d.match(diff_match_patch.nonAlphaNumericRegex_),
        g = e && c.match(diff_match_patch.whitespaceRegex_),
        h = f && d.match(diff_match_patch.whitespaceRegex_),
        c = g && c.match(diff_match_patch.linebreakRegex_),
        d = h && d.match(diff_match_patch.linebreakRegex_),
        i = c && a.match(diff_match_patch.blanklineEndRegex_),
        j = d && b.match(diff_match_patch.blanklineStartRegex_);
      return i || j
        ? 5
        : c || d
        ? 4
        : e && !g && h
        ? 3
        : g || h
        ? 2
        : e || f
        ? 1
        : 0;
    }
    for (var c = 1; c < a.length - 1; ) {
      if (0 == a[c - 1][0] && 0 == a[c + 1][0]) {
        var d = a[c - 1][1],
          e = a[c][1],
          f = a[c + 1][1],
          g = this.diff_commonSuffix(d, e);
        if (g)
          var h = e.substring(e.length - g),
            d = d.substring(0, d.length - g),
            e = h + e.substring(0, e.length - g),
            f = h + f;
        for (
          var g = d, h = e, j = f, i = b(d, e) + b(e, f);
          e.charAt(0) === f.charAt(0);

        ) {
          var d = d + e.charAt(0),
            e = e.substring(1) + f.charAt(0),
            f = f.substring(1),
            k = b(d, e) + b(e, f);
          k >= i && ((i = k), (g = d), (h = e), (j = f));
        }
        a[c - 1][1] != g &&
          (g ? (a[c - 1][1] = g) : (a.splice(c - 1, 1), c--),
          (a[c][1] = h),
          j ? (a[c + 1][1] = j) : (a.splice(c + 1, 1), c--));
      }
      c++;
    }
  };
  diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
  diff_match_patch.whitespaceRegex_ = /\s/;
  diff_match_patch.linebreakRegex_ = /[\r\n]/;
  diff_match_patch.blanklineEndRegex_ = /\n\r?\n$/;
  diff_match_patch.blanklineStartRegex_ = /^\r?\n\r?\n/;
  diff_match_patch.prototype.diff_cleanupEfficiency = function (a) {
    for (
      var b = !1,
        c = [],
        d = 0,
        e = null,
        f = 0,
        g = !1,
        h = !1,
        j = !1,
        i = !1;
      f < a.length;

    ) {
      if (0 == a[f][0])
        a[f][1].length < this.Diff_EditCost && (j || i)
          ? ((c[d++] = f), (g = j), (h = i), (e = a[f][1]))
          : ((d = 0), (e = null)),
          (j = i = !1);
      else if (
        (-1 == a[f][0] ? (i = !0) : (j = !0),
        e &&
          ((g && h && j && i) ||
            (e.length < this.Diff_EditCost / 2 && 3 == g + h + j + i)))
      )
        a.splice(c[d - 1], 0, [-1, e]),
          (a[c[d - 1] + 1][0] = 1),
          d--,
          (e = null),
          g && h
            ? ((j = i = !0), (d = 0))
            : (d--, (f = 0 < d ? c[d - 1] : -1), (j = i = !1)),
          (b = !0);
      f++;
    }
    b && this.diff_cleanupMerge(a);
  };
  diff_match_patch.prototype.diff_cleanupMerge = function (a) {
    a.push([0, '']);
    for (var b = 0, c = 0, d = 0, e = '', f = '', g; b < a.length; )
      switch (a[b][0]) {
        case 1:
          d++;
          f += a[b][1];
          b++;
          break;
        case -1:
          c++;
          e += a[b][1];
          b++;
          break;
        case 0:
          1 < c + d
            ? (0 !== c &&
                0 !== d &&
                ((g = this.diff_commonPrefix(f, e)),
                0 !== g &&
                  (0 < b - c - d && 0 == a[b - c - d - 1][0]
                    ? (a[b - c - d - 1][1] += f.substring(0, g))
                    : (a.splice(0, 0, [0, f.substring(0, g)]), b++),
                  (f = f.substring(g)),
                  (e = e.substring(g))),
                (g = this.diff_commonSuffix(f, e)),
                0 !== g &&
                  ((a[b][1] = f.substring(f.length - g) + a[b][1]),
                  (f = f.substring(0, f.length - g)),
                  (e = e.substring(0, e.length - g)))),
              0 === c
                ? a.splice(b - d, c + d, [1, f])
                : 0 === d
                ? a.splice(b - c, c + d, [-1, e])
                : a.splice(b - c - d, c + d, [-1, e], [1, f]),
              (b = b - c - d + (c ? 1 : 0) + (d ? 1 : 0) + 1))
            : 0 !== b && 0 == a[b - 1][0]
            ? ((a[b - 1][1] += a[b][1]), a.splice(b, 1))
            : b++,
            (c = d = 0),
            (f = e = '');
      }
    '' === a[a.length - 1][1] && a.pop();
    c = !1;
    for (b = 1; b < a.length - 1; )
      0 == a[b - 1][0] &&
        0 == a[b + 1][0] &&
        (a[b][1].substring(a[b][1].length - a[b - 1][1].length) == a[b - 1][1]
          ? ((a[b][1] =
              a[b - 1][1] +
              a[b][1].substring(0, a[b][1].length - a[b - 1][1].length)),
            (a[b + 1][1] = a[b - 1][1] + a[b + 1][1]),
            a.splice(b - 1, 1),
            (c = !0))
          : a[b][1].substring(0, a[b + 1][1].length) == a[b + 1][1] &&
            ((a[b - 1][1] += a[b + 1][1]),
            (a[b][1] = a[b][1].substring(a[b + 1][1].length) + a[b + 1][1]),
            a.splice(b + 1, 1),
            (c = !0))),
        b++;
    c && this.diff_cleanupMerge(a);
  };
  diff_match_patch.prototype.diff_xIndex = function (a, b) {
    var c = 0,
      d = 0,
      e = 0,
      f = 0,
      g;
    for (g = 0; g < a.length; g++) {
      1 !== a[g][0] && (c += a[g][1].length);
      -1 !== a[g][0] && (d += a[g][1].length);
      if (c > b) break;
      e = c;
      f = d;
    }
    return a.length != g && -1 === a[g][0] ? f : f + (b - e);
  };
  diff_match_patch.prototype.diff_prettyHtml = function (a) {
    for (
      var b = [], c = /&/g, d = /</g, e = />/g, f = /\n/g, g = 0;
      g < a.length;
      g++
    ) {
      var h = a[g][0],
        j = a[g][1],
        j = j
          .replace(c, '&amp;')
          .replace(d, '&lt;')
          .replace(e, '&gt;')
          .replace(f, '&para;<br>');
      switch (h) {
        case 1:
          b[g] = '<ins style="background:#e6ffe6;">' + j + '</ins>';
          break;
        case -1:
          b[g] = '<del style="background:#ffe6e6;">' + j + '</del>';
          break;
        case 0:
          b[g] = '<span>' + j + '</span>';
      }
    }
    return b.join('');
  };
  diff_match_patch.prototype.diff_text1 = function (a) {
    for (var b = [], c = 0; c < a.length; c++)
      1 !== a[c][0] && (b[c] = a[c][1]);
    return b.join('');
  };
  diff_match_patch.prototype.diff_text2 = function (a) {
    for (var b = [], c = 0; c < a.length; c++)
      -1 !== a[c][0] && (b[c] = a[c][1]);
    return b.join('');
  };
  diff_match_patch.prototype.diff_levenshtein = function (a) {
    for (var b = 0, c = 0, d = 0, e = 0; e < a.length; e++) {
      var f = a[e][0],
        g = a[e][1];
      switch (f) {
        case 1:
          c += g.length;
          break;
        case -1:
          d += g.length;
          break;
        case 0:
          (b += Math.max(c, d)), (d = c = 0);
      }
    }
    return (b += Math.max(c, d));
  };
  diff_match_patch.prototype.diff_toDelta = function (a) {
    for (var b = [], c = 0; c < a.length; c++)
      switch (a[c][0]) {
        case 1:
          b[c] = '+' + encodeURI(a[c][1]);
          break;
        case -1:
          b[c] = '-' + a[c][1].length;
          break;
        case 0:
          b[c] = '=' + a[c][1].length;
      }
    return b.join('\t').replace(/%20/g, ' ');
  };
  diff_match_patch.prototype.diff_fromDelta = function (a, b) {
    for (
      var c = [], d = 0, e = 0, f = b.split(/\t/g), g = 0;
      g < f.length;
      g++
    ) {
      var h = f[g].substring(1);
      switch (f[g].charAt(0)) {
        case '+':
          try {
            c[d++] = [1, decodeURI(h)];
          } catch (j) {
            throw Error('Illegal escape in diff_fromDelta: ' + h);
          }
          break;
        case '-':
        case '=':
          var i = parseInt(h, 10);
          if (isNaN(i) || 0 > i)
            throw Error('Invalid number in diff_fromDelta: ' + h);
          h = a.substring(e, (e += i));
          '=' == f[g].charAt(0) ? (c[d++] = [0, h]) : (c[d++] = [-1, h]);
          break;
        default:
          if (f[g])
            throw Error('Invalid diff operation in diff_fromDelta: ' + f[g]);
      }
    }
    if (e != a.length)
      throw Error(
        'Delta length (' +
          e +
          ') does not equal source text length (' +
          a.length +
          ').'
      );
    return c;
  };
  diff_match_patch.prototype.match_main = function (a, b, c) {
    if (null == a || null == b || null == c)
      throw Error('Null input. (match_main)');
    c = Math.max(0, Math.min(c, a.length));
    return a == b
      ? 0
      : a.length
      ? a.substring(c, c + b.length) == b
        ? c
        : this.match_bitap_(a, b, c)
      : -1;
  };
  diff_match_patch.prototype.match_bitap_ = function (a, b, c) {
    function d(a, d) {
      var e = a / b.length,
        g = Math.abs(c - d);
      return !f.Match_Distance ? (g ? 1 : e) : e + g / f.Match_Distance;
    }
    if (b.length > this.Match_MaxBits)
      throw Error('Pattern too long for this browser.');
    var e = this.match_alphabet_(b),
      f = this,
      g = this.Match_Threshold,
      h = a.indexOf(b, c);
    -1 != h &&
      ((g = Math.min(d(0, h), g)),
      (h = a.lastIndexOf(b, c + b.length)),
      -1 != h && (g = Math.min(d(0, h), g)));
    for (
      var j = 1 << (b.length - 1),
        h = -1,
        i,
        k,
        p = b.length + a.length,
        q,
        s = 0;
      s < b.length;
      s++
    ) {
      i = 0;
      for (k = p; i < k; )
        d(s, c + k) <= g ? (i = k) : (p = k), (k = Math.floor((p - i) / 2 + i));
      p = k;
      i = Math.max(1, c - k + 1);
      var o = Math.min(c + k, a.length) + b.length;
      k = Array(o + 2);
      for (k[o + 1] = (1 << s) - 1; o >= i; o--) {
        var v = e[a.charAt(o - 1)];
        k[o] =
          0 === s
            ? ((k[o + 1] << 1) | 1) & v
            : (((k[o + 1] << 1) | 1) & v) |
              ((q[o + 1] | q[o]) << 1) |
              1 |
              q[o + 1];
        if (k[o] & j && ((v = d(s, o - 1)), v <= g))
          if (((g = v), (h = o - 1), h > c)) i = Math.max(1, 2 * c - h);
          else break;
      }
      if (d(s + 1, c) > g) break;
      q = k;
    }
    return h;
  };
  diff_match_patch.prototype.match_alphabet_ = function (a) {
    for (var b = {}, c = 0; c < a.length; c++) b[a.charAt(c)] = 0;
    for (c = 0; c < a.length; c++) b[a.charAt(c)] |= 1 << (a.length - c - 1);
    return b;
  };
  diff_match_patch.prototype.patch_addContext_ = function (a, b) {
    if (0 != b.length) {
      for (
        var c = b.substring(a.start2, a.start2 + a.length1), d = 0;
        b.indexOf(c) != b.lastIndexOf(c) &&
        c.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin;

      )
        (d += this.Patch_Margin),
          (c = b.substring(a.start2 - d, a.start2 + a.length1 + d));
      d += this.Patch_Margin;
      (c = b.substring(a.start2 - d, a.start2)) && a.diffs.unshift([0, c]);
      (d = b.substring(a.start2 + a.length1, a.start2 + a.length1 + d)) &&
        a.diffs.push([0, d]);
      a.start1 -= c.length;
      a.start2 -= c.length;
      a.length1 += c.length + d.length;
      a.length2 += c.length + d.length;
    }
  };
  diff_match_patch.prototype.patch_make = function (a, b, c) {
    var d;
    if ('string' == typeof a && 'string' == typeof b && 'undefined' == typeof c)
      (d = a),
        (b = this.diff_main(d, b, !0)),
        2 < b.length &&
          (this.diff_cleanupSemantic(b), this.diff_cleanupEfficiency(b));
    else if (
      a &&
      'object' == typeof a &&
      'undefined' == typeof b &&
      'undefined' == typeof c
    )
      (b = a), (d = this.diff_text1(b));
    else if (
      'string' == typeof a &&
      b &&
      'object' == typeof b &&
      'undefined' == typeof c
    )
      d = a;
    else if (
      'string' == typeof a &&
      'string' == typeof b &&
      c &&
      'object' == typeof c
    )
      (d = a), (b = c);
    else throw Error('Unknown call format to patch_make.');
    if (0 === b.length) return [];
    for (
      var c = [],
        a = new diff_match_patch.patch_obj(),
        e = 0,
        f = 0,
        g = 0,
        h = d,
        j = 0;
      j < b.length;
      j++
    ) {
      var i = b[j][0],
        k = b[j][1];
      if (!e && 0 !== i) (a.start1 = f), (a.start2 = g);
      switch (i) {
        case 1:
          a.diffs[e++] = b[j];
          a.length2 += k.length;
          d = d.substring(0, g) + k + d.substring(g);
          break;
        case -1:
          a.length1 += k.length;
          a.diffs[e++] = b[j];
          d = d.substring(0, g) + d.substring(g + k.length);
          break;
        case 0:
          k.length <= 2 * this.Patch_Margin && e && b.length != j + 1
            ? ((a.diffs[e++] = b[j]),
              (a.length1 += k.length),
              (a.length2 += k.length))
            : k.length >= 2 * this.Patch_Margin &&
              e &&
              (this.patch_addContext_(a, h),
              c.push(a),
              (a = new diff_match_patch.patch_obj()),
              (e = 0),
              (h = d),
              (f = g));
      }
      1 !== i && (f += k.length);
      -1 !== i && (g += k.length);
    }
    e && (this.patch_addContext_(a, h), c.push(a));
    return c;
  };
  diff_match_patch.prototype.patch_deepCopy = function (a) {
    for (var b = [], c = 0; c < a.length; c++) {
      var d = a[c],
        e = new diff_match_patch.patch_obj();
      e.diffs = [];
      for (var f = 0; f < d.diffs.length; f++) e.diffs[f] = d.diffs[f].slice();
      e.start1 = d.start1;
      e.start2 = d.start2;
      e.length1 = d.length1;
      e.length2 = d.length2;
      b[c] = e;
    }
    return b;
  };
  diff_match_patch.prototype.patch_apply = function (a, b) {
    if (0 == a.length) return [b, []];
    var a = this.patch_deepCopy(a),
      c = this.patch_addPadding(a),
      b = c + b + c;
    this.patch_splitMax(a);
    for (var d = 0, e = [], f = 0; f < a.length; f++) {
      var g = a[f].start2 + d,
        h = this.diff_text1(a[f].diffs),
        j,
        i = -1;
      if (h.length > this.Match_MaxBits) {
        if (
          ((j = this.match_main(b, h.substring(0, this.Match_MaxBits), g)),
          -1 != j &&
            ((i = this.match_main(
              b,
              h.substring(h.length - this.Match_MaxBits),
              g + h.length - this.Match_MaxBits
            )),
            -1 == i || j >= i))
        )
          j = -1;
      } else j = this.match_main(b, h, g);
      if (-1 == j) (e[f] = !1), (d -= a[f].length2 - a[f].length1);
      else if (
        ((e[f] = !0),
        (d = j - g),
        (g =
          -1 == i
            ? b.substring(j, j + h.length)
            : b.substring(j, i + this.Match_MaxBits)),
        h == g)
      )
        b =
          b.substring(0, j) +
          this.diff_text2(a[f].diffs) +
          b.substring(j + h.length);
      else if (
        ((g = this.diff_main(h, g, !1)),
        h.length > this.Match_MaxBits &&
          this.diff_levenshtein(g) / h.length > this.Patch_DeleteThreshold)
      )
        e[f] = !1;
      else {
        this.diff_cleanupSemanticLossless(g);
        for (var h = 0, k, i = 0; i < a[f].diffs.length; i++) {
          var p = a[f].diffs[i];
          0 !== p[0] && (k = this.diff_xIndex(g, h));
          1 === p[0]
            ? (b = b.substring(0, j + k) + p[1] + b.substring(j + k))
            : -1 === p[0] &&
              (b =
                b.substring(0, j + k) +
                b.substring(j + this.diff_xIndex(g, h + p[1].length)));
          -1 !== p[0] && (h += p[1].length);
        }
      }
    }
    b = b.substring(c.length, b.length - c.length);
    return [b, e];
  };
  diff_match_patch.prototype.patch_addPadding = function (a) {
    for (var b = this.Patch_Margin, c = '', d = 1; d <= b; d++)
      c += String.fromCharCode(d);
    for (d = 0; d < a.length; d++) (a[d].start1 += b), (a[d].start2 += b);
    var d = a[0],
      e = d.diffs;
    if (0 == e.length || 0 != e[0][0])
      e.unshift([0, c]),
        (d.start1 -= b),
        (d.start2 -= b),
        (d.length1 += b),
        (d.length2 += b);
    else if (b > e[0][1].length) {
      var f = b - e[0][1].length;
      e[0][1] = c.substring(e[0][1].length) + e[0][1];
      d.start1 -= f;
      d.start2 -= f;
      d.length1 += f;
      d.length2 += f;
    }
    d = a[a.length - 1];
    e = d.diffs;
    0 == e.length || 0 != e[e.length - 1][0]
      ? (e.push([0, c]), (d.length1 += b), (d.length2 += b))
      : b > e[e.length - 1][1].length &&
        ((f = b - e[e.length - 1][1].length),
        (e[e.length - 1][1] += c.substring(0, f)),
        (d.length1 += f),
        (d.length2 += f));
    return c;
  };
  diff_match_patch.prototype.patch_splitMax = function (a) {
    for (var b = this.Match_MaxBits, c = 0; c < a.length; c++)
      if (!(a[c].length1 <= b)) {
        var d = a[c];
        a.splice(c--, 1);
        for (var e = d.start1, f = d.start2, g = ''; 0 !== d.diffs.length; ) {
          var h = new diff_match_patch.patch_obj(),
            j = !0;
          h.start1 = e - g.length;
          h.start2 = f - g.length;
          if ('' !== g)
            (h.length1 = h.length2 = g.length), h.diffs.push([0, g]);
          for (; 0 !== d.diffs.length && h.length1 < b - this.Patch_Margin; ) {
            var g = d.diffs[0][0],
              i = d.diffs[0][1];
            1 === g
              ? ((h.length2 += i.length),
                (f += i.length),
                h.diffs.push(d.diffs.shift()),
                (j = !1))
              : -1 === g &&
                1 == h.diffs.length &&
                0 == h.diffs[0][0] &&
                i.length > 2 * b
              ? ((h.length1 += i.length),
                (e += i.length),
                (j = !1),
                h.diffs.push([g, i]),
                d.diffs.shift())
              : ((i = i.substring(0, b - h.length1 - this.Patch_Margin)),
                (h.length1 += i.length),
                (e += i.length),
                0 === g ? ((h.length2 += i.length), (f += i.length)) : (j = !1),
                h.diffs.push([g, i]),
                i == d.diffs[0][1]
                  ? d.diffs.shift()
                  : (d.diffs[0][1] = d.diffs[0][1].substring(i.length)));
          }
          g = this.diff_text2(h.diffs);
          g = g.substring(g.length - this.Patch_Margin);
          i = this.diff_text1(d.diffs).substring(0, this.Patch_Margin);
          '' !== i &&
            ((h.length1 += i.length),
            (h.length2 += i.length),
            0 !== h.diffs.length && 0 === h.diffs[h.diffs.length - 1][0]
              ? (h.diffs[h.diffs.length - 1][1] += i)
              : h.diffs.push([0, i]));
          j || a.splice(++c, 0, h);
        }
      }
  };
  diff_match_patch.prototype.patch_toText = function (a) {
    for (var b = [], c = 0; c < a.length; c++) b[c] = a[c];
    return b.join('');
  };
  diff_match_patch.prototype.patch_fromText = function (a) {
    var b = [];
    if (!a) return b;
    for (
      var a = a.split('\n'), c = 0, d = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
      c < a.length;

    ) {
      var e = a[c].match(d);
      if (!e) throw Error('Invalid patch string: ' + a[c]);
      var f = new diff_match_patch.patch_obj();
      b.push(f);
      f.start1 = parseInt(e[1], 10);
      '' === e[2]
        ? (f.start1--, (f.length1 = 1))
        : '0' == e[2]
        ? (f.length1 = 0)
        : (f.start1--, (f.length1 = parseInt(e[2], 10)));
      f.start2 = parseInt(e[3], 10);
      '' === e[4]
        ? (f.start2--, (f.length2 = 1))
        : '0' == e[4]
        ? (f.length2 = 0)
        : (f.start2--, (f.length2 = parseInt(e[4], 10)));
      for (c++; c < a.length; ) {
        e = a[c].charAt(0);
        try {
          var g = decodeURI(a[c].substring(1));
        } catch (h) {
          throw Error('Illegal escape in patch_fromText: ' + g);
        }
        if ('-' == e) f.diffs.push([-1, g]);
        else if ('+' == e) f.diffs.push([1, g]);
        else if (' ' == e) f.diffs.push([0, g]);
        else if ('@' == e) break;
        else if ('' !== e)
          throw Error('Invalid patch mode "' + e + '" in: ' + g);
        c++;
      }
    }
    return b;
  };
  diff_match_patch.patch_obj = function () {
    this.diffs = [];
    this.start2 = this.start1 = null;
    this.length2 = this.length1 = 0;
  };
  diff_match_patch.patch_obj.prototype.toString = function () {
    var a, b;
    a =
      0 === this.length1
        ? this.start1 + ',0'
        : 1 == this.length1
        ? this.start1 + 1
        : this.start1 + 1 + ',' + this.length1;
    b =
      0 === this.length2
        ? this.start2 + ',0'
        : 1 == this.length2
        ? this.start2 + 1
        : this.start2 + 1 + ',' + this.length2;
    a = ['@@ -' + a + ' +' + b + ' @@\n'];
    var c;
    for (b = 0; b < this.diffs.length; b++) {
      switch (this.diffs[b][0]) {
        case 1:
          c = '+';
          break;
        case -1:
          c = '-';
          break;
        case 0:
          c = ' ';
      }
      a[b + 1] = c + encodeURI(this.diffs[b][1]) + '\n';
    }
    return a.join('').replace(/%20/g, ' ');
  };
  window.diff_match_patch = diff_match_patch;
  window.DIFF_DELETE = -1;
  window.DIFF_INSERT = 1;
  window.DIFF_EQUAL = 0;
})();

RangyDecorator = (function () {
  function RangyDecorator(options) {
    if (options == null) {
      options = {};
    }
    this.rootNode = options.root;
    this.containerNode = options.node;
    this.contentId = options.contentId;
    this.userId = options.userId;
    this.env = options.env;
    this.selector = options.selector;
    this.savePath = options.savePath;
    this.loadPath = options.loadPath;
    this.a = new App(
      this.env,
      this.rootNode,
      this.containerNode,
      this.contentId,
      this.userId,
      this.selector,
      this.savePath,
      this.loadPath
    );
  }

  return RangyDecorator;
})();

window.RangyDecorator = RangyDecorator;

module.exports = { RangyDecorator };
